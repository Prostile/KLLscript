#ifndef DEFINITIONS_H
#define DEFINITIONS_H

#include <string> // Может понадобиться для других заголовков, включающих этот

// --- Состояния Лексического Анализатора ---
// Используем enum class для большей типобезопасности
enum class LexerState {
    START,        // Начальное состояние (S)
    IDENTIFIER,   // Чтение идентификатора/ключевого слова (A)
    NUMBER,       // Чтение числовой константы (B)
    FINAL,        // Конечное состояние (лексема распознана) (F)
    ERROR         // Состояние ошибки (O)
};

// --- Типы Лексем (Токенов) ---
// Используем enum для удобства, коды взяты из оригинального def.h
// Добавляем базовые типы и маркеры
enum TokenType {
    // Литералы и идентификаторы
    T_IDENTIFIER = 257, // Идентификатор (VAR в старом коде)
    T_NUMBER_INT = 256, // Целочисленная константа (CONST в старом коде)
    // T_NUMBER_FLOAT, // Зарезервировано для будущего расширения
    // T_BOOL_TRUE,    // Зарезервировано для будущего расширения
    // T_BOOL_FALSE,   // Зарезервировано для будущего расширения

    // Ключевые слова
    T_KW_INT = 266, // int
    T_KW_ARR = 267, // arr (MMAS в старом коде)
    T_KW_IF = 259, // if
    T_KW_ELSE = 261, // else
    T_KW_WHILE = 262, // while
    T_KW_BEGIN = 272, // begin
    T_KW_END = 273, // end
    T_KW_CIN = 264, // cin (INPUT в старом коде)
    T_KW_COUT = 265, // cout (OUTPUT в старом коде)
    // T_KW_FLOAT,     // Зарезервировано для будущего расширения
    // T_KW_BOOL,      // Зарезервировано для будущего расширения

    // Операторы и разделители (используем ASCII коды для простоты, где возможно)
    T_ASSIGN = '=', // = (Присваивание)
    T_PLUS = '+', // + (Сложение)
    T_MINUS = '-', // - (Вычитание)
    T_MULTIPLY = '*', // * (Умножение)
    T_DIVIDE = '/', // / (Деление)
    T_LPAREN = '(', // ( (Левая скобка)
    T_RPAREN = ')', // ) (Правая скобка)
    T_LBRACKET = '[', // [ (Левая квадратная скобка - индексация)
    T_RBRACKET = ']', // ] (Правая квадратная скобка - индексация)
    T_SEMICOLON = ';', // ; (Точка с запятой)
    // T_COMMA    = ',', // , (Запятая - может понадобиться для float или bool)

    // Операторы сравнения
    T_EQUAL = '~', // ~ (Равенство ==)
    T_GREATER = '>', // > (Больше)
    T_LESS = '<', // < (Меньше)
    T_NOT_EQUAL = '!', // ! (Неравенство !=)

    // Специальные токены
    T_EOF = 271, // Конец файла (EOF в старом коде)
    T_ERROR = -1,  // Ошибка лексического анализа
    T_UNKNOWN = 0    // Неизвестный или неинициализированный токен
};


// --- Типы операций ОПС (RPN - Reverse Polish Notation) ---
// Использовался в старом коде как OPSType
enum class RPNOpCode {
    // Операнды (маркеры типов, значения будут храниться отдельно)
    PUSH_VAR,       // Положить переменную (адрес/индекс) в стек
    PUSH_ARRAY,     // Положить массив (адрес/индекс) в стек
    PUSH_CONST_INT, // Положить целую константу в стек
    // PUSH_CONST_FLOAT, // Зарезервировано
    // PUSH_CONST_BOOL,  // Зарезервировано

    // Бинарные арифметические операции
    ADD,            // +
    SUB,            // -
    MUL,            // *
    DIV,            // /

    // Бинарные операции сравнения
    CMP_EQ,         // ~ (==)
    CMP_NE,         // ! (!=)
    CMP_GT,         // >
    CMP_LT,         // <
    // CMP_GE,         // >= (если нужно будет добавить)
    // CMP_LE,         // <= (если нужно будет добавить)

    // Операция присваивания
    ASSIGN,         // =

    // Операция индексации
    INDEX,          // [ ]

    // Унарные операции ввода/вывода
    READ,           // r (cin)
    WRITE,          // w (cout)

    // Операции перехода
    JUMP,           // j (безусловный переход)
    JUMP_FALSE,     // jf (переход по лжи)

    // Специальные маркеры (могут не понадобиться при новой реализации)
    // I        = 268, // Старая метка массива для ОПС (заменена на INDEX)
    // MJFALSE  = 269, // Старая метка перехода по "ложь" (заменена на JUMP_FALSE)
    // MJTRUE   = 270, // Старая метка безусловного перехода (заменена на JUMP)

    // Метка (используется как операнд для переходов)
    LABEL           // Маркер метки в ОПС
};

// --- Прочие константы ---
const int SYMBOL_TABLE_SIZE = 100; // Размер таблицы символов (LSIZE в старом коде)
const int RPN_STRING_BUFFER_SIZE = 10; // Размер буфера для строкового представления операнда ОПС (x в старом коде)


#endif // DEFINITIONS_H